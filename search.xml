<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Emiyaのdiary</title>
    <url>/2099/06/16/Emiya%E3%81%AEdiary/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="20220502"><a href="#20220502" class="headerlink" title="20220502"></a>20220502</h3><ol>
<li><p>学习利用Hexo和github搭建博客，目前博客基本搭建完成</p>
</li>
<li><p>搭建嵌入式环境，基本完成</p>
</li>
<li><p>学习修复路由器运行环境</p>
</li>
<li><p>学习 kernel pwn 基础环境搭建知识</p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习日记</category>
      </categories>
  </entry>
  <entry>
    <title>Kernel Pwn 环境搭建及基础知识</title>
    <url>/2022/05/05/Kernel-Pwn-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<span id="more"></span>
<p>本文主要参考 <a href="https://ctf-wiki.org/pwn/linux/kernel-mode/environment/qemu-emulate/">CTF-wiki</a> 和 <a href="https://kiprey.github.io/2021/10/kernel_pwn_introduction/">kiprey</a></p>
<h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HOST OS Platform: macOS</span><br><span class="line">HOST OS Version: 10.15</span><br><span class="line">虚拟机软件：VMware Fusion 12</span><br><span class="line">OS Platform:  Linux Ubuntu</span><br><span class="line">OS Version: 18.04</span><br><span class="line">Python Version: 3.6.9 (default)</span><br></pre></td></tr></table></figure>

<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p><strong>gdb 插件安装</strong><br>调试内核需要优秀的 gdb 插件，现有的插件有 <code>gef</code> <code>pwndbg</code> <code>peda</code>，有师傅推荐 gef，但是我们可以直接全部安装</p>
<p>脚本地址：<a href="https://github.com/apogiatzis/gdb-peda-pwndbg-gef">https://github.com/apogiatzis/gdb-peda-pwndbg-gef</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ &amp;&amp; git <span class="built_in">clone</span> https://github.com/apogiatzis/gdb-peda-pwndbg-gef.git</span><br><span class="line"><span class="built_in">cd</span> ~/gdb-peda-pwndbg-gef</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<p>这样就不用考虑以后使用其他插件的问题了</p>
<p><strong>内核配置</strong><br>官方的内核网址：<a href="https://www.kernel.org/category/releases.html">https://www.kernel.org/category/releases.html</a><br>一般选用 Longterm，即长期支持版</p>
<p>国内有很多镜像文件源，上海离中科大比较近，因此我们选用科大源 <a href="https://mirrors.ustc.edu.cn/kernel.org/linux/kernel/">https://mirrors.ustc.edu.cn/kernel.org/linux/kernel/</a></p>
<p>以 <code>linux-5.17.5.tar.xz</code> 为例，可以看到内核的全部文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/Desktop$ wget -c https://mirrors.ustc.edu.cn/kernel.org/linux/kernel/v5.x/linux-5.17.5.tar.xz</span><br><span class="line"></span><br><span class="line">embeded@ubuntu:~/Desktop$ unxz linux-5.17.5.tar.xz </span><br><span class="line">embeded@ubuntu:~/Desktop$ tar -xf linux-5.17.5.tar</span><br><span class="line">embeded@ubuntu:~/Desktop$ <span class="built_in">cd</span> linux-5.17.5/</span><br><span class="line">embeded@ubuntu:~/Desktop/linux-5.17.5$ <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">arch</span>     CREDITS        fs       Kbuild   LICENSES     net      security  virt</span><br><span class="line">block    crypto         include  Kconfig  MAINTAINERS  README   sound</span><br><span class="line">certs    Documentation  init     kernel   Makefile     samples  tools</span><br><span class="line">COPYING  drivers        ipc      lib      mm           scripts  usr</span><br></pre></td></tr></table></figure>

<p><strong>交换文件扩充（可选）</strong><br>由于选择在虚拟机上进行调试，在编译或者其他操作时可能会出现内存爆炸，这里我选择加一个交换空间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/home/embeded<span class="comment"># dd if=/dev/zero of=swapfile bs=1M count=5120</span></span><br><span class="line">root@ubuntu:/home/embeded<span class="comment"># mkswap swapfile</span></span><br><span class="line">root@ubuntu:/home/embeded<span class="comment"># chmod 0600 swapfile</span></span><br><span class="line">root@ubuntu:/home/embeded<span class="comment"># swapon swapfile</span></span><br></pre></td></tr></table></figure>

<p><strong>配置编译选项</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install libncurses5-dev</span><br><span class="line">$ sudo apt install flex</span><br><span class="line">$ sudo apt install bison</span><br><span class="line">$ sudo apt install libssl-dev</span><br><span class="line">$ sudo apt install libelf-dev</span><br><span class="line">$ sudo apt install dwarves</span><br><span class="line"></span><br><span class="line">$ make menuconfig</span><br><span class="line"></span><br><span class="line">Kernel Hacking-&gt;Compile-checks and compiler options </span><br><span class="line">-&gt; Compile the kernel with debug info <span class="comment"># 便于调试，一般默认打开</span></span><br><span class="line">Generic Kernel Debugging Instruments</span><br><span class="line">-&gt; KGDB：kernel debugger <span class="comment"># KGDB 调试内核，一般默认打开</span></span><br></pre></td></tr></table></figure>

<p><strong>编译内核</strong><br>编辑内核镜像，建议不要选择太高，根据机器性能而定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make -j 4 bzImage</span><br><span class="line">...</span><br><span class="line">  AS      <span class="built_in">arch</span>/x86/boot/header.o</span><br><span class="line">  LD      <span class="built_in">arch</span>/x86/boot/setup.elf</span><br><span class="line">  OBJCOPY <span class="built_in">arch</span>/x86/boot/setup.bin</span><br><span class="line">  BUILD   <span class="built_in">arch</span>/x86/boot/bzImage</span><br><span class="line">Kernel: <span class="built_in">arch</span>/x86/boot/bzImage is ready  (<span class="comment">#2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bzImage: 主流 Kernel 镜像格式，适用于较大的 Kernel</span></span><br><span class="line">embeded@ubuntu:~/Desktop/linux-5.17.5$ binwalk ./arch/x86/boot/bzImage</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             Microsoft executable, portable (PE)</span><br><span class="line">16588         0x40CC          gzip compressed data, maximum compression, from Unix, last modified: 1970-01-01 00:00:00 (null <span class="built_in">date</span>)</span><br><span class="line">7898753       0x788681        Cisco IOS microcode, <span class="keyword">for</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>:warning: 报错信息 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make[1]: *** No rule to make target &#x27;debian/canonical-certs.pem&#x27;, needed by &#x27;certs/x509_certificate_list&#x27;.  Stop.</span><br><span class="line">make[1]: *** Waiting for unfinished jobs....</span><br><span class="line"></span><br><span class="line">解决办法：直接修改 .config 文件，将 CONFIG_SYSTEM_TRUSTED_KEYS CONFIG_SYSTEM_REVOCATION_KEYS 置空</span><br></pre></td></tr></table></figure>

<p><strong>构建文件系统</strong><br>下载 busybox 源代码，并编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/Desktop$ wget -c https://busybox.net/downloads/busybox-1.35.0.tar.bz2</span><br><span class="line">embeded@ubuntu:~/Desktop$ tar -jxf busybox-1.35.0.tar.bz2</span><br><span class="line"></span><br><span class="line">embeded@ubuntu:~/Desktop$ <span class="built_in">cd</span> busybox-1.35.0/</span><br><span class="line">embeded@ubuntu:~/Desktop/busybox-1.35.0$ make menuconfig</span><br><span class="line"></span><br><span class="line">Settings -&gt; Build static binary (no shared libs) <span class="comment"># kernel 不提供 libc</span></span><br><span class="line">关闭 Linux System Utilities -&gt; Support mounting NFS file systems on Linux &lt; 2.6.23 <span class="comment"># 一般默认不打开</span></span><br><span class="line"></span><br><span class="line">embeded@ubuntu:~/Desktop/busybox-1.35.0$ make -j 4</span><br></pre></td></tr></table></figure>
<p>配置文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/Desktop/busybox-1.35.0$ make install</span><br><span class="line">embeded@ubuntu:~/Desktop/busybox-1.35.0$ <span class="built_in">cd</span> _install</span><br><span class="line">embeded@ubuntu:~/Desktop/busybox-1.35.0$ <span class="built_in">mkdir</span> -p proc sys dev etc/init.d </span><br></pre></td></tr></table></figure>
<p>编写挂载脚本 init，设置权限并打包文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/Desktop/busybox-1.35.0/_install$ gedit init</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;INIT SCRIPT&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> /tmp</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mount -t debugfs none /sys/kernel/debug</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Boot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds&quot;</span></span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh</span><br><span class="line"></span><br><span class="line">embeded@ubuntu:~/Desktop/busybox-1.35.0/_install$ <span class="built_in">chmod</span> +x ./init</span><br><span class="line"></span><br><span class="line">embeded@ubuntu:~/Desktop/busybox-1.35.0/_install$ find . | cpio -o --format=newc &gt; ../../rootfs.img</span><br></pre></td></tr></table></figure>
<p><strong>启动内核</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/Desktop$ qemu-system-x86_64 -nographic -kernel ./linux-5.17.5/arch/x86/boot/bzImage -initrd ./rootfs.img -append <span class="string">&quot;root=/dev/ram rw console=ttyS0 nokaslr&quot;</span> -smp cores=2,threads=1 -cpu kvm64</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">INIT SCRIPT</span><br><span class="line">Boot took 1.71 seconds</span><br><span class="line">/ $ [    1.718707] tsc: Refined TSC clocksource calibration: 2303.917 MHz</span><br><span class="line">[    1.719573] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x2135a96e28b, max_idle_ns: 440795251144 ns</span><br><span class="line">[    1.721389] clocksource: Switched to clocksource tsc</span><br><span class="line"></span><br><span class="line">/ $ </span><br><span class="line">/ $ <span class="built_in">ls</span></span><br><span class="line">bin      etc      linuxrc  root     sys      usr</span><br><span class="line">dev      init     proc     sbin     tmp</span><br></pre></td></tr></table></figure>
<p>:warning: 这里按照 <a href="https://ctf-wiki.org/pwn/linux/kernel-mode/environment/qemu-emulate/#_10">CTF-wiki</a> 的写法我的QEMU跑不起来，将 <code>-m</code> 参数删除，猜测可能是内核版本过高，内存设置不足导致</p>
<h3 id="内核驱动编写与调试"><a href="#内核驱动编写与调试" class="headerlink" title="内核驱动编写与调试"></a>内核驱动编写与调试</h3><p><strong>驱动编写与编译</strong><br>在内核源码目录下构建文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/Desktop/linux-5.17.5$ <span class="built_in">mkdir</span> mydriver</span><br><span class="line">embeded@ubuntu:~/Desktop/linux-5.17.5$ <span class="built_in">cd</span> mydriver/</span><br></pre></td></tr></table></figure>
<p>在目录下构建驱动代码 <code>ko_test.c</code>，原封不动照抄</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ko_test_init</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;This is a test ko!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ko_test_exit</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Bye Bye~\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(ko_test_init);</span><br><span class="line">module_exit(ko_test_exit);</span><br></pre></td></tr></table></figure>
<p>添加 <code>Makefile</code> 文件</p>
<figure class="highlight mk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定声称哪些 内核模块</span></span><br><span class="line">obj-m += ko_test.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定内核项目路径</span></span><br><span class="line">KDIR =/home/embeded/Desktop/linux-5.17.5</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">        <span class="comment"># -C 参数指定进入内核项目路径</span></span><br><span class="line">        <span class="comment"># -M 指定驱动源码的环境，使 Makefile 在构建模块之前返回到 驱动源码 目录，并在该目录中生成驱动模块</span></span><br><span class="line">        <span class="variable">$(MAKE)</span> -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        rm -rf *.o *.ko *.mod.* *.symvers *.order</span><br></pre></td></tr></table></figure>
<p>进行编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/Desktop/linux-5.17.5/mydriver$ make</span><br><span class="line">make -C /home/embeded/Desktop/linux-5.17.5/ M=/home/embeded/Desktop/linux-5.17.5/mydriver modules</span><br><span class="line">make[1]: Entering directory <span class="string">&#x27;/home/embeded/Desktop/linux-5.17.5&#x27;</span></span><br><span class="line">  CC [M]  /home/embeded/Desktop/linux-5.17.5/mydriver/ko_test.o</span><br><span class="line">  MODPOST /home/embeded/Desktop/linux-5.17.5/mydriver/Module.symvers</span><br><span class="line">  CC [M]  /home/embeded/Desktop/linux-5.17.5/mydriver/ko_test.mod.o</span><br><span class="line">  LD [M]  /home/embeded/Desktop/linux-5.17.5/mydriver/ko_test.ko</span><br><span class="line">make[1]: Leaving directory <span class="string">&#x27;/home/embeded/Desktop/linux-5.17.5&#x27;</span></span><br></pre></td></tr></table></figure>
<p>:warning:  <code>Makefile:9: *** missing separator (did you mean TAB instead of 8 spaces?).  Stop.</code><br>解决办法：vim 打开进行修改</p>
<p>:warning: <code>WARNING: Symbol version dump &quot;Module.symvers&quot; is missing. Modules may not have dependencies or modversions.</code><br>解决方式：回到内核源码目录，执行 <code>make -j 4 modules</code>，在编译模块的过程中，可以看到 <code>GEN     Module.symvers</code>，编译完成后重新编译自定义模块</p>
<p><strong>驱动运行</strong><br>将编译出来的 <code>*.ko</code> 文件复制到 rootfs 文件夹，即 <code>busybox*/_install</code>，修改运行脚本文件，提权运行并挂载模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;INIT SCRIPT&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> /tmp</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mount -t debugfs none /sys/kernel/debug</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line">+ insmod /ko_test.ko <span class="comment"># 挂载内核模块</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Boot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds&quot;</span></span><br><span class="line">- setsid /bin/cttyhack setuidgid 1000 /bin/sh</span><br><span class="line">+ setsid /bin/cttyhack setuidgid 0 /bin/sh <span class="comment"># 修改 uid gid 为 0 以提权 /bin/sh 至 root。</span></span><br><span class="line">+ poweroff -f <span class="comment"># 设置 shell 退出后则关闭机器</span></span><br></pre></td></tr></table></figure>
<p>重新打包 <code>rootfs</code> 并运行 <code>qemu</code>，查看 <code>dmesg</code> 信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[    2.159687] ko_test: loading out-of-tree module taints kernel.</span><br><span class="line">[    2.160878] ko_test: module verification failed: signature and/or required key missing - tainting kernel</span><br><span class="line">[    2.165558] This is a <span class="built_in">test</span> ko!</span><br><span class="line">Boot took 2.14 seconds</span><br><span class="line">/ <span class="comment"># lsmod</span></span><br><span class="line">ko_test 16384 0 - Live 0xffffffffc0002000 (OE)</span><br></pre></td></tr></table></figure>

<p><strong>驱动调试：附加QEMU</strong><br>qemu 拥有调试接口，可以通过指定参数 <code>-gdb tcp::1234</code> 或等价符号 <code>-s</code>，如果希望 qemu 启动后立刻挂起，则需要指定 <code>-S</code></p>
<p>调试内核时为了加载 vmlinux 符号表，需要确保指定 <code>-append &quot;nokaslr&quot;</code>，否则无法给目标函数下断点<br>即模拟命令为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/Desktop$ qemu-system-x86_64 -s -S -nographic -kernel ./linux-5.17.5/arch/x86/boot/bzImage -initrd ./rootfs.img -append <span class="string">&quot;root=/dev/ram rw console=ttyS0 nokaslr&quot;</span> -smp cores=2,threads=1 -cpu kvm64</span><br></pre></td></tr></table></figure>
<p>qemu 启动后另起终端，执行命令 <code>gdb -q -ex &quot;target remote localhost::1234&quot;</code> 即可附加到 QEMU 上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/Desktop/linux-5.17.5$ gdb-gef -q -ex <span class="string">&quot;target remote localhost:1234&quot;</span></span><br></pre></td></tr></table></figure>
<p>通过添加符号表可以给特定函数下断点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  file ./vmlinux</span><br><span class="line">Reading symbols from ./vmlinux...done.</span><br><span class="line">gef➤  b start_kernel</span><br><span class="line">Breakpoint 1 at 0xffffffff831c7d55: file init/main.c, line 929.</span><br><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br></pre></td></tr></table></figure>
<p>可以通过以下命令查看内核中的符号信息(加载地址)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># grep prepare_kernel_cred  /proc/kallsyms</span></span><br><span class="line">ffffffff810d8410 T prepare_kernel_cred</span><br><span class="line">ffffffff826eda20 r __ksymtab_prepare_kernel_cred</span><br><span class="line">ffffffff82713b4a r __kstrtab_prepare_kernel_cred</span><br><span class="line">ffffffff827189f9 r __kstrtabns_prepare_kernel_cred</span><br><span class="line">/ <span class="comment"># grep commit_creds  /proc/kallsyms</span></span><br><span class="line">ffffffff810d8160 T commit_creds</span><br><span class="line">ffffffff826e5884 r __ksymtab_commit_creds</span><br><span class="line">ffffffff82713b0a r __kstrtab_commit_creds</span><br><span class="line">ffffffff827189f9 r __kstrtabns_commit_creds</span><br><span class="line">/ <span class="comment"># grep ko_test_init  /proc/kallsyms</span></span><br><span class="line">ffffffffc0002000 t ko_test_init	[ko_test]</span><br></pre></td></tr></table></figure>

<p>装载模块和卸载模块的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># insmod mod_name</span></span><br><span class="line">/ <span class="comment"># rmmod mod_name</span></span><br></pre></td></tr></table></figure>

<p><strong>驱动调试：附加驱动</strong><br>在驱动装载进内核之后，首先查看已经加载的模块，并获取驱动加载的基地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># lsmod</span></span><br><span class="line">ko_test 16384 0 - Live 0xffffffffc0002000 (OE)</span><br><span class="line">/ <span class="comment"># grep ko_test /proc/modules</span></span><br><span class="line">ko_test 16384 0 - Live 0xffffffffc0002000 (OE)</span><br></pre></td></tr></table></figure>
<p>查看目标内核模块各个 <code>section</code> 的首地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># grep &quot;0x&quot; /sys/module/ko_test/sections/.*</span></span><br><span class="line">/sys/module/ko_test/sections/.gnu.linkonce.this_module:0xffffffffc0004000</span><br><span class="line">/sys/module/ko_test/sections/.note.Linux:0xffffffffc0003054</span><br><span class="line">/sys/module/ko_test/sections/.note.gnu.build-id:0xffffffffc0003000</span><br><span class="line">/sys/module/ko_test/sections/.rodata.str1.1:0xffffffffc0003024</span><br><span class="line">/sys/module/ko_test/sections/.strtab:0xffffffffc0007378</span><br><span class="line">/sys/module/ko_test/sections/.symtab:0xffffffffc0007000</span><br><span class="line">/sys/module/ko_test/sections/.text:0xffffffffc0002000</span><br></pre></td></tr></table></figure>

<p>在 gdb 窗口中加载调试符号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add-symbol-file mydrivers/ko_test.ko &lt;ko_test_base_addr&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在此处，命令可以为</span></span><br><span class="line">gef➤  add-symbol-file mydriver/ko_test.ko 0xffffffffc0002000</span><br><span class="line">add symbol table from file <span class="string">&quot;mydriver/ko_test.ko&quot;</span> at</span><br><span class="line">	.text_addr = 0xffffffffc0002000</span><br><span class="line">Reading symbols from mydriver/ko_test.ko...done.</span><br></pre></td></tr></table></figure>

<p><strong>例子：nokaslr</strong><br>这里简单叙述一下调试 ko_test 模块函数的例子<br>首先，启动 QEMU 及 gdb<br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205061251955.png"><br>读取 vmlinux 符号表并继续执行<br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205061255929.png"><br>查看是否已经装载模块，及确认模块地址信息<br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205061302059.png"><br>在 gdb 调试界面按下 Ctrl+C 断下 kernel，并添加 ko_test 符号信息<br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205061305485.png"><br>在 ko_test 模块函数处下断点<br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205061307459.png"><br>继续运行 kernel，对 ko_test 进行卸载并重新装填，可以看到 gdb 会在断在模块函数处<br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205061309841.png"><br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205061312650.png"></p>
<p>这里是利用 nokaslr 下相同驱动加载基地址不变的原理进行下断点</p>
<!-- **例子：kaslr**
如何在开始 ``kaslr`` 时调试 ``init`` 函数？
在模块被装填过程中，会调用 ``load_module`` 函数，在其内部会调用 ``do_init_module`` 函数对模块进行初始化,
其中 ``load_module`` 函数对应 SYSCALL 函数的 ``init_module`` 调用 

由于在 kernel 启用时会加载系统模块，先让 kernel 加载完毕，然后 Ctrl+C 断掉并在 ``do_init_module`` 处下断点，该函数前半部分会执行内核模块的 ``init`` 函数
![](https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205061331847.png)
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * This is <span class="built_in">where</span> the real work happens.</span><br><span class="line"> *</span><br><span class="line"> * Keep it uninlined to provide a reliable breakpoint target, e.g. <span class="keyword">for</span> the gdb</span><br><span class="line"> * helper <span class="built_in">command</span> <span class="string">&#x27;lx-symbols&#x27;</span>.</span><br><span class="line"> */</span><br><span class="line">static noinline int do_init_module(struct module *mod)</span><br><span class="line">&#123;</span><br><span class="line">  [...]</span><br><span class="line">  /* Start the module */</span><br><span class="line">  <span class="keyword">if</span> (mod-&gt;init != NULL)</span><br><span class="line">    ret = do_one_initcall(mod-&gt;init);   // &lt;- 此处执行 ko_test_init 函数</span><br><span class="line">  <span class="keyword">if</span> (ret &lt; 0) &#123;</span><br><span class="line">    goto fail_free_freeinit;</span><br><span class="line">  &#125;</span><br><span class="line">  [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>放开 kernel，加载模块，可以看到 gdb 断掉 –&gt;</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>QEMU</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>修复路由器程序运行环境</title>
    <url>/2022/05/05/%E4%BF%AE%E5%A4%8D%E8%B7%AF%E7%94%B1%E5%99%A8%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HOST OS Platform: macOS</span><br><span class="line">HOST OS Version: 10.15</span><br><span class="line">虚拟机软件：VMware Fusion 12</span><br><span class="line">OS Platform:  Linux Ubuntu</span><br><span class="line">OS Version: 18.04</span><br><span class="line">Python Version: 3.6.9 (default)</span><br></pre></td></tr></table></figure>

<h2 id="固件信息"><a href="#固件信息" class="headerlink" title="固件信息"></a>固件信息</h2><p>本章以 D-Link DIR-605L（FW_113）路由器为例</p>
<p>下载链接：	<a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-605L/REVA/DIR-605L_FIRMWARE_1.13.ZIP">ftp://FTP2.DLINK.COM/PRODUCTS/DIR-605L/REVA/DIR-605L_FIRMWARE_1.13.ZIP</a></p>
<p>查看信息，解压并提取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/domesticRouter/3$ binwalk -e dir605L_FW_113.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">11280         0x2C10          LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 2129920 bytes</span><br><span class="line">563234        0x89822         Squashfs filesystem, big endian, version 2.0, size: 64160 bytes, 7 inodes, blocksize: 65536 bytes, created: 2012-05-25 04:03:47</span><br><span class="line">628788        0x99834         Squashfs filesystem, big endian, version 2.0, size: 2301312 bytes, 495 inodes, blocksize: 65536 bytes, created: 2012-05-25 04:04:00</span><br></pre></td></tr></table></figure>
<p>查看提取结果，可以看到系统信息存在于 <code>squashfs-root-0</code> 目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/domesticRouter/3$ tree -L 2 _dir605L_FW_113.bin.extracted/</span><br><span class="line">_dir605L_FW_113.bin.extracted/</span><br><span class="line">├── 2C10</span><br><span class="line">├── 2C10.7z</span><br><span class="line">├── 89822.squashfs</span><br><span class="line">├── 99834.squashfs</span><br><span class="line">├── squashfs-root</span><br><span class="line">│   ├── mydlink-watch-dog.sh</span><br><span class="line">│   ├── opt.local</span><br><span class="line">│   ├── signalc</span><br><span class="line">│   ├── tsa</span><br><span class="line">│   ├── uplog</span><br><span class="line">│   └── version</span><br><span class="line">└── squashfs-root-0</span><br><span class="line">    ├── bin</span><br><span class="line">    ├── dev</span><br><span class="line">    ├── etc</span><br><span class="line">    ├── lib</span><br><span class="line">    ├── mydlink</span><br><span class="line">    ├── proc</span><br><span class="line">    ├── sbin</span><br><span class="line">    ├── tmp -&gt; /dev/null</span><br><span class="line">    ├── usr</span><br><span class="line">    ├── var</span><br><span class="line">    ├── web</span><br><span class="line">    └── web-lang -&gt; /dev/null</span><br></pre></td></tr></table></figure>

<h2 id="尝试运行并修复-Web-服务器程序"><a href="#尝试运行并修复-Web-服务器程序" class="headerlink" title="尝试运行并修复 Web 服务器程序"></a>尝试运行并修复 Web 服务器程序</h2><p>使用 QEMU 进行模拟运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/domesticRouter/3/_dir605L_FW_113.bin.extracted/squashfs-root-0$ <span class="built_in">cp</span> $(<span class="built_in">which</span> qemu-mips-static) .</span><br><span class="line"></span><br><span class="line">embeded@ubuntu:~/domesticRouter/3/_dir605L_FW_113.bin.extracted/squashfs-root-0$ sudo <span class="built_in">chroot</span> . ./qemu-mips-static ./bin/boa</span><br><span class="line">Initialize AP MIB failed!</span><br><span class="line">qemu: uncaught target signal 11 (Segmentation fault) - core dumped</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure>
<p>可以看到报错，信息为 <code>Initialize AP MIB failed</code>，在 <code>JEB</code> 打开 <code>boa</code> 进行字符串寻找<br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205051207608.png"><br>无论是根据反汇编进行查看，还是进行反编译查看，都能看到通过 <code>apmib_init</code> 进行初始化<br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205051225819.png"><br>使用 JEB 查看 <code>apmib.so</code> 中的 <code>apmib_init</code>，正常返回值应为 1<br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205051230467.png"></p>
<p>因此编写函数进行劫持</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">apmib_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Fake it</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译并再次运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mips-linux-gnu-gcc -Wall -fPIC -shared apmib.c -o apmib-ld.so</span><br><span class="line"></span><br><span class="line">$ embeded@ubuntu:~/domesticRouter/3/_dir605L_FW_113.bin.extracted/squashfs-root-0$ sudo <span class="built_in">chroot</span> . ./qemu-mips-static -E LD_PRELOAD=<span class="string">&quot;/apmib-ld.so&quot;</span> ./bin/boa</span><br><span class="line">Create chklist file error!</span><br><span class="line">Create chklist file error!</span><br><span class="line">qemu: uncaught target signal 11 (Segmentation fault) - core dumped</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure>

<p>依旧报错，手上没有 IDA 尝试启用动态调试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/domesticRouter/3/_dir605L_FW_113.bin.extracted/squashfs-root-0$ sudo <span class="built_in">chroot</span> . ./qemu-mips-static -E LD_PRELOAD=<span class="string">&quot;/apmib-ld.so&quot;</span> -g 1234 ./bin/boa</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205051527711.png"></p>
<p>这里结合 JEB 反汇编能看出来属于 apmib_get，但是其代码功能分析就暂时不做了，整理劫持函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIB_IP_ADDR 170</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIB_HW_VER 0x250</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIB_CAPTCHA 0x2C1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">apmib_init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// Fake it;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fork</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">apmib_get</span><span class="params">(<span class="type">int</span> code, <span class="type">int</span> *value)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(code)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> MIB_HW_VER:</span><br><span class="line">            *value = <span class="number">0xF1</span>;</span><br><span class="line">        <span class="keyword">case</span> MIB_IP_ADDR:</span><br><span class="line">            *value = <span class="number">0x7F000001</span>;</span><br><span class="line">        <span class="keyword">case</span> MIB_CAPTCHA:</span><br><span class="line">            *value = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译执行可以看到，成功运行 boa 程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/domesticRouter/3/_dir605L_FW_113.bin.extracted/squashfs-root-0$ sudo <span class="built_in">chroot</span> . ./qemu-mips-static -E LD_PRELOAD=<span class="string">&quot;/apmib-ld.so&quot;</span> ./bin/boa</span><br><span class="line">Create chklist file error!</span><br><span class="line">Create chklist file error!</span><br><span class="line">hard ver is</span><br><span class="line">Create f/w version file error!</span><br><span class="line">Create chklist file error!</span><br><span class="line">boa: server version Boa/0.94.14rc21</span><br><span class="line">boa: server built May 25 2012 at 13:03:21.</span><br><span class="line">boa: starting server pid=9326, port 80</span><br><span class="line">Unsupported ioctl: cmd=0x89f0</span><br><span class="line">device ioctl:: Function not implemented</span><br><span class="line">Unsupported ioctl: cmd=0x89f0</span><br><span class="line">device ioctl:: Function not implemented</span><br><span class="line">smart 404 ----------------------------------</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">embeded@ubuntu:~/domesticRouter/3/_dir605L_FW_113.bin.extracted/squashfs-root-0$ netstat -an | grep 80</span><br><span class="line">warning, got bogus unix line.</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      1 192.168.31.110:48678    34.122.121.32:80        SYN_SENT </span><br></pre></td></tr></table></figure>

<p>可以看到 Web 服务器 boa 已经成功运行</p>
]]></content>
      <categories>
        <category>Iot</category>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>QEMU</tag>
        <tag>MIPS</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式环境搭建</title>
    <url>/2022/05/03/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h1><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HOST OS Platform: macOS</span><br><span class="line">HOST OS Version: 10.15</span><br><span class="line">虚拟机软件：VMware Fusion 12</span><br><span class="line">OS Platform:  Linux Ubuntu</span><br><span class="line">OS Version: 18.04</span><br><span class="line">Python Version: 3.6.9 (default)</span><br></pre></td></tr></table></figure>

<h2 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改为中科大源</span></span><br><span class="line"></span><br><span class="line">$ sudo apt install build-essential autoconf <span class="comment"># 配置</span></span><br><span class="line">$ sudo apt install tree jnettop htop <span class="comment"># 查看目录、连接、性能</span></span><br><span class="line">$ sudo apt install proxychains4 net-tools <span class="comment"># 查看配置网络</span></span><br><span class="line">$ sudo apt install git curl wget  <span class="comment"># 下载</span></span><br><span class="line"></span><br><span class="line">$ sudo apt install python3 python3-pip <span class="comment"># python3 环境</span></span><br><span class="line">$ python3 -m pip install --upgrade pip</span><br><span class="line">$ python3 -m pip -V</span><br><span class="line">pip 21.3.1 from /home/embeded/.local/lib/python3.6/site-packages/pip (python 3.6)</span><br></pre></td></tr></table></figure>

<h1 id="软件环境搭建流程"><a href="#软件环境搭建流程" class="headerlink" title="软件环境搭建流程"></a>软件环境搭建流程</h1><h2 id="Binwalk"><a href="#Binwalk" class="headerlink" title="Binwalk"></a>Binwalk</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Binwalk wiki 链接：<a href="https://github.com/ReFirmLabs/binwalk/wiki">https://github.com/ReFirmLabs/binwalk/wiki</a></p>
<p>安装参考链接：<a href="https://github.com/ReFirmLabs/binwalk/blob/master/INSTALL.md">https://github.com/ReFirmLabs/binwalk/blob/master/INSTALL.md</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ReFirmLabs/binwalk.git</span><br><span class="line">$ <span class="built_in">cd</span> binwalk</span><br><span class="line">$ sudo python3 setup.py install</span><br><span class="line">...</span><br><span class="line">Installed /usr/local/lib/python3.6/dist-packages/binwalk-2.3.3-py3.6.egg</span><br><span class="line">Processing dependencies <span class="keyword">for</span> binwalk==2.3.3</span><br><span class="line">Finished processing dependencies <span class="keyword">for</span> binwalk==2.3.3</span><br><span class="line"></span><br><span class="line">$ binwalk </span><br><span class="line"></span><br><span class="line">Binwalk v2.3.3</span><br><span class="line">Craig Heffner, ReFirmLabs</span><br><span class="line">https://github.com/ReFirmLabs/binwalk</span><br><span class="line"></span><br><span class="line">Usage: binwalk [OPTIONS] [FILE1] [FILE2] [FILE3] ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>依据 Binwalk wiki 所说，其安装依赖只有 python 解释器，其余所有依赖都是可选的运行时依赖，直接按顺序全部安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo python3 -m pip install nose coverage <span class="comment"># 测试/测试覆盖率</span></span><br><span class="line"></span><br><span class="line">$ sudo python3 -m pip install pycryptodome <span class="comment"># 解密知名加密固件</span></span><br><span class="line"></span><br><span class="line">$ sudo apt-get install libqt4-opengl python3-opengl python3-pyqt4 python3-pyqt4.qtopengl python3-numpy python3-scipy</span><br><span class="line">$ sudo python3 -m pip install pyqtgraph <span class="comment"># 生成图及可视化</span></span><br><span class="line"></span><br><span class="line">$ sudo python3 -m pip install capstone <span class="comment"># 反汇编框架 Python-bindings</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 额外的工具自动抽取/解压文件和数据  </span></span><br><span class="line"><span class="comment"># 标准解压工具</span></span><br><span class="line">$ sudo apt-get install mtd-utils gzip bzip2 tar arj lhasa p7zip p7zip-full cabextract cramfsswap squashfs-tools sleuthkit default-jdk lzop srecord</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对非标准 SquashFS 镜像</span></span><br><span class="line">$ sudo apt-get install zlib1g-dev liblzma-dev liblzo2-dev</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/devttys0/sasquatch</span><br><span class="line">$ (<span class="built_in">cd</span> sasquatch &amp;&amp; ./build.sh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对 JFFS2 文件系统</span></span><br><span class="line">$ sudo python3 -m pip install cstruct</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/sviehb/jefferson</span><br><span class="line">$ (<span class="built_in">cd</span> jefferson &amp;&amp; sudo python3 setup.py install)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对 UBIFS 文件系统</span></span><br><span class="line">$ sudo apt-get install liblzo2-dev python-lzo</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/jrspruitt/ubi_reader</span><br><span class="line">$ (<span class="built_in">cd</span> ubi_reader &amp;&amp; sudo python3 setup.py install)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对 YAFFS 文件系统</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/devttys0/yaffshiv</span><br><span class="line">$ (<span class="built_in">cd</span> yaffshiv &amp;&amp; sudo python3 setup.py install)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对 StuffIt 压缩文件</span></span><br><span class="line">$ wget -O - http://downloads.tuxfamily.org/sdtraces/stuffit520.611linux-i386.tar.gz | tar -zxv</span><br><span class="line">$ sudo <span class="built_in">cp</span> bin/unstuff /usr/local/bin/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>:exclamation: 按照原文安装过程中会报错 <code>E: Unable to locate package cramfsprogs</code> 需要手动安装这个包<br>安装包都可以从 <a href="https://launchpad.net/ubuntu">https://launchpad.net/ubuntu</a> 查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -c https://launchpad.net/ubuntu/+archive/primary/+files/cramfsprogs_1.1-6ubuntu1_amd64.deb</span><br><span class="line">$ sudo dpkg -i cramfsprogs_1.1-6ubuntu1_amd64.deb</span><br></pre></td></tr></table></figure>

<p>【optional】 binwalk plugin for ida in linux</p>
<p>至此 binwalk 算是安装好了，至于使用放在后话吧</p>
<h2 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>qemu github 项目地址：<a href="https://github.com/qemu/qemu">https://github.com/qemu/qemu</a></p>
<p>qemu 官网：<a href="https://www.qemu.org/">https://www.qemu.org/</a></p>
<p>参考网站提供的安装方式，目前直接使用 <code>apt</code> 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install qemu</span><br><span class="line">Suggested packages:</span><br><span class="line">  qemu-user-static samba vde2 qemu-efi openbios-ppc openhackware</span><br><span class="line">  openbios-sparc sgabios ovmf debootstrap sharutils-doc bsd-mailx | mailx</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  binfmt-support cpu-checker ibverbs-providers ipxe-qemu</span><br><span class="line">  ipxe-qemu-256k-compat-efi-roms libaio1 libcacard0 libfdt1 libibverbs1</span><br><span class="line">  libiscsi7 libnl-route-3-200 librados2 librbd1 librdmacm1 libsdl1.2debian</span><br><span class="line">  libspice-server1 libusbredirparser1 libxen-4.9 libxenstore3.0 msr-tools qemu</span><br><span class="line">  qemu-block-extra qemu-slof qemu-system qemu-system-arm qemu-system-common</span><br><span class="line">  qemu-system-mips qemu-system-misc qemu-system-ppc qemu-system-s390x</span><br><span class="line">  qemu-system-sparc qemu-system-x86 qemu-user qemu-user-binfmt qemu-utils</span><br><span class="line">  seabios sharutils</span><br><span class="line"><span class="comment"># 可以看到 qemu-utils qemu-user qemu-system 都自动安装成功</span></span><br><span class="line">$ qemu-</span><br><span class="line">qemu-aarch64              qemu-ppc                  qemu-system-mipsel</span><br><span class="line">qemu-alpha                qemu-ppc64                qemu-system-moxie</span><br><span class="line">qemu-arm                  qemu-ppc64abi32           qemu-system-nios2</span><br><span class="line">qemu-armeb                qemu-ppc64le              qemu-system-or1k</span><br><span class="line">qemu-cris                 qemu-s390x                qemu-system-ppc</span><br><span class="line">qemu-hppa                 qemu-sh4                  qemu-system-ppc64</span><br><span class="line">qemu-i386                 qemu-sh4eb                qemu-system-ppc64le</span><br><span class="line">qemu-img                  qemu-sparc                qemu-system-ppcemb</span><br><span class="line">qemu-io                   qemu-sparc32plus          qemu-system-s390x</span><br><span class="line">qemu-m68k                 qemu-sparc64              qemu-system-sh4</span><br><span class="line">qemu-make-debian-root     qemu-system-aarch64       qemu-system-sh4eb</span><br><span class="line">qemu-microblaze           qemu-system-alpha         qemu-system-sparc</span><br><span class="line">qemu-microblazeel         qemu-system-arm           qemu-system-sparc64</span><br><span class="line">qemu-mips                 qemu-system-cris          qemu-system-tricore</span><br><span class="line">qemu-mips64               qemu-system-i386          qemu-system-unicore32</span><br><span class="line">qemu-mips64el             qemu-system-lm32          qemu-system-x86_64</span><br><span class="line">qemu-mipsel               qemu-system-m68k          qemu-system-xtensa</span><br><span class="line">qemu-mipsn32              qemu-system-microblaze    qemu-system-xtensaeb</span><br><span class="line">qemu-mipsn32el            qemu-system-microblazeel  qemu-tilegx</span><br><span class="line">qemu-nbd                  qemu-system-mips          qemu-x86_64</span><br><span class="line">qemu-nios2                qemu-system-mips64        </span><br><span class="line">qemu-or1k                 qemu-system-mips64el </span><br><span class="line"></span><br><span class="line"><span class="comment"># 依据建议的安装包手动安装</span></span><br><span class="line">$ sudo apt install qemu-user-static</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="交叉编译环境"><a href="#交叉编译环境" class="headerlink" title="交叉编译环境"></a>交叉编译环境</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>交叉编译这个名字其实有时候很费解，还不如直接<strong>跨架构编译</strong>，即能够在一个体系架构下编译另一个体系架构的程序<br>🌰 在 X86_64 Ubuntu 虚拟机下能够编译 MIPS 程序</p>
<p>🧐 安装似乎可以分成 <strong>手动 buildroot 源码编译</strong> 和 <strong>自动 apt 安装</strong><br><strong>自动安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以 MIPS 小端序 架构为例 自动安装</span></span><br><span class="line">$ sudo apt install gcc-mipsel-linux-gnu </span><br><span class="line">$ sudo apt install gcc-multilib-mipsel-linux-gnu</span><br><span class="line">$ mipsel-linux-gnu-</span><br><span class="line">mipsel-linux-gnu-addr2line     mipsel-linux-gnu-gcov-7</span><br><span class="line">mipsel-linux-gnu-ar            mipsel-linux-gnu-gcov-dump</span><br><span class="line">mipsel-linux-gnu-as            mipsel-linux-gnu-gcov-dump-7</span><br><span class="line">mipsel-linux-gnu-c++filt       mipsel-linux-gnu-gcov-tool</span><br><span class="line">mipsel-linux-gnu-cpp           mipsel-linux-gnu-gcov-tool-7</span><br><span class="line">mipsel-linux-gnu-cpp-7         mipsel-linux-gnu-gprof</span><br><span class="line">mipsel-linux-gnu-dwp           mipsel-linux-gnu-ld</span><br><span class="line">mipsel-linux-gnu-elfedit       mipsel-linux-gnu-ld.bfd</span><br><span class="line">mipsel-linux-gnu-gcc           mipsel-linux-gnu-ld.gold</span><br><span class="line">mipsel-linux-gnu-gcc-7         mipsel-linux-gnu-nm</span><br><span class="line">mipsel-linux-gnu-gcc-ar        mipsel-linux-gnu-objcopy</span><br><span class="line">mipsel-linux-gnu-gcc-ar-7      mipsel-linux-gnu-objdump</span><br><span class="line">mipsel-linux-gnu-gcc-nm        mipsel-linux-gnu-ranlib</span><br><span class="line">mipsel-linux-gnu-gcc-nm-7      mipsel-linux-gnu-readelf</span><br><span class="line">mipsel-linux-gnu-gcc-ranlib    mipsel-linux-gnu-size</span><br><span class="line">mipsel-linux-gnu-gcc-ranlib-7  mipsel-linux-gnu-strings</span><br><span class="line">mipsel-linux-gnu-gcov          mipsel-linux-gnu-strip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有的库都安装好</span></span><br><span class="line">$ <span class="built_in">ls</span> /usr/mipsel-linux-gnu/</span><br><span class="line">bin  include  lib  lib32  lib64</span><br></pre></td></tr></table></figure>

<h3 id="出现的问题-1"><a href="#出现的问题-1" class="headerlink" title="出现的问题"></a>出现的问题</h3><p><strong>自动安装</strong><br>在运行动态编译程序时，会出现无法找到运行库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/domesticRouter/2$ file hellomips2</span><br><span class="line">hellomips2: ELF 32-bit LSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld.so.1, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=102923f6f07c0954cdcec2091a8e65988d646527, not stripped</span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ ./hellomips2</span><br><span class="line">/lib/ld.so.1: No such file or directory</span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ qemu-mipsel hellomips2</span><br><span class="line">/lib/ld.so.1: No such file or directory</span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ qemu-mipsel-static hellomips2</span><br><span class="line">/lib/ld.so.1: No such file or directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 猜测是动态编译的程序默认去 /lib 下进行寻找动态链接库</span></span><br><span class="line"><span class="comment"># 两种解决办法</span></span><br><span class="line"><span class="comment"># 1. 将动态链接库直接复制到 /lib 下，执行命令行执行模拟，【感觉环境会被搞乱</span></span><br><span class="line">embeded@ubuntu:/usr/mipsel-linux-gnu/lib$ sudo <span class="built_in">cp</span> ld.so.1 /lib</span><br><span class="line">embeded@ubuntu:/usr/mipsel-linux-gnu/lib$ <span class="built_in">ls</span> /lib</span><br><span class="line">apparmor       hdparm                                lsb            terminfo</span><br><span class="line">brltty         ifupdown                              modprobe.d     udev</span><br><span class="line">console-setup  init                                  modules        ufw</span><br><span class="line">cpp            klibc-IYXwqr0atR70aQDgNUuRThfwUwA.so  netplan        x86_64-linux-gnu</span><br><span class="line">crda           ld.so.1                               recovery-mode</span><br><span class="line">firmware       linux-sound-base                      systemd</span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ qemu-mipsel-static hellomips2 <span class="string">&quot;can run&quot;</span></span><br><span class="line">can run</span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ qemu-mipsel hellomips2 <span class="string">&quot;can run&quot;</span></span><br><span class="line">can run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 将动态库和静态编译模拟程序qemu-mipsel-static复制到需要模拟的程序所在目录下，执行模拟 【感觉比第一种选择好</span></span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ <span class="built_in">cp</span> -r /usr/mipsel-linux-gnu/lib .</span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ <span class="built_in">cp</span> $(<span class="built_in">which</span> qemu-mipsel-static) .</span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ sudo <span class="built_in">chroot</span> . ./qemu-mipsel-static hellomips2 <span class="string">&quot;can run&quot;</span></span><br><span class="line">can run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 在模拟时添加路径 【感觉最简单</span></span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ qemu-mipsel -L <span class="string">&quot;/usr/mipsel-linux-gnu&quot;</span> hellomips2 <span class="string">&quot;can run&quot;</span></span><br><span class="line">can run</span><br></pre></td></tr></table></figure>

<p><strong>神奇的未理解的现象</strong><br>在理论来说，不同架构的程序是不能运行的，但是在静态编译后却能够运行，有点费解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 尝试程序为 家用路由器漏洞 一书第二章 hello 和 静态交叉编译的 hellomips</span></span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ file hello</span><br><span class="line">hello: ELF 32-bit MSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, not stripped</span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ file hellomips</span><br><span class="line">hellomips: ELF 32-bit LSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), statically linked, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=a0c1b5ffe47a77b693643e4637baa72d4496a962, not stripped</span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ <span class="built_in">uname</span> -a </span><br><span class="line">Linux ubuntu 5.4.0-84-generic <span class="comment">#94~18.04.1-Ubuntu SMP Thu Aug 26 23:17:46 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ ./hello <span class="string">&quot;Why can run&quot;</span></span><br><span class="line">Why can run</span><br><span class="line">embeded@ubuntu:~/domesticRouter/2$ ./hellomips <span class="string">&quot;Why can run&quot;</span></span><br><span class="line">Why can run</span><br></pre></td></tr></table></figure>

<h1 id="软件环境配置流程"><a href="#软件环境配置流程" class="headerlink" title="软件环境配置流程"></a>软件环境配置流程</h1><h2 id="MIPS-系统网络配置"><a href="#MIPS-系统网络配置" class="headerlink" title="MIPS 系统网络配置"></a>MIPS 系统网络配置</h2><p><strong>安装工具库</strong></p>
<p>安装 User mode Linux 工具,User Mode Linux 能够以用户态启动 Linux 内核，提供了一种虚拟机，将 Linux 作为用户进程运行在另一个 Linux 内核下。 这对于内核开发、沙盒、监禁、实验和许多其他事情很有用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~$ sudo apt install uml-utilities</span><br><span class="line">embeded@ubuntu:~$ uml_</span><br><span class="line">uml_mconsole  uml_moo       uml_switch    </span><br><span class="line">uml_mkcow     uml_mount     uml_watchdog</span><br></pre></td></tr></table></figure>
<p>安装 Linux 网桥工具,能够创建和管理网桥设备，可为VM设置网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~$ sudo apt install bridge-utils</span><br></pre></td></tr></table></figure>
<p><strong>配置主机网络</strong><br>要构建模拟系统的网络配置，需要在主机网络配置网络接口，查看系统网络配置 可以看到两个网络接口为 ens33 和 lo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~$ ifconfig </span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.31.111  netmask 255.255.255.0  broadcast 192.168.31.255</span><br><span class="line">        inet6 fe80::ae68:bfd8:87e6:7a5e  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 00:0c:29:83:f8:e7  txqueuelen 1000  (Ethernet)</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
<p>修改主机网络配置 将 ens33 作为桥接端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~$ sudo nano /etc/network/interfaces</span><br><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto ens33      </span><br><span class="line">iface ens33 inet dhcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># auto br0</span></span><br><span class="line">iface br0 inet dhcp</span><br><span class="line">  bridge_ports ens33</span><br><span class="line">  bridge_maxwait 0</span><br></pre></td></tr></table></figure>

<!-- **修改 QEMU 网络接口脚本**
由于 ``qemu-ifup`` 文件早已存在，直接在脚本后面添加，能够支持 QEMU 在启动时处理网络
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~$ sudo nano /etc/qemu-ifup</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Executing /etc/qemu-ifup&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Bridge up <span class="variable">$1</span> for bridged mode...&quot;</span></span><br><span class="line">sudo /sbin/ifconfig <span class="variable">$1</span> 0.0.0.0 promisc up</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Adding <span class="variable">$1</span> to br0...&quot;</span></span><br><span class="line">sudo /sbin/brct1 addif br0 <span class="variable">$1</span></span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line">``` --&gt;</span><br><span class="line"></span><br><span class="line">**重启网络**</span><br><span class="line">为了使配置生效，需要将网络进行重启</span><br><span class="line">```bash</span><br><span class="line">embeded@ubuntu:~$ sudo /etc/init.d/networking restart</span><br><span class="line">[ ok ] Restarting networking (via systemctl): networking.service.</span><br></pre></td></tr></table></figure>

<p><strong>启用桥接网络</strong><br>先关闭 ens33 端口，查看网络接口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~$ sudo ifdown ens33</span><br><span class="line">...</span><br><span class="line">DHCPRELEASE on ens33 to 192.168.31.1 port 67 (xid=0x297aad1a)</span><br><span class="line"></span><br><span class="line">embeded@ubuntu:~$ ifconfig </span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>开启 br0 桥接端口，重新查看网络接口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~$ sudo ifup br0</span><br><span class="line">...</span><br><span class="line">DHCPDISCOVER on br0 to 255.255.255.255 port 67 interval 3 (xid=0x6dfa5573)</span><br><span class="line">DHCPREQUEST of 192.168.31.111 on br0 to 255.255.255.255 port 67 (xid=0x7355fa6d)</span><br><span class="line">DHCPOFFER of 192.168.31.111 from 192.168.31.1</span><br><span class="line">DHCPACK of 192.168.31.111 from 192.168.31.1</span><br><span class="line">bound to 192.168.31.111 -- renewal <span class="keyword">in</span> 16622 seconds.</span><br><span class="line"></span><br><span class="line">embeded@ubuntu:~$ ifconfig </span><br><span class="line">br0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.31.111  netmask 255.255.255.0  broadcast 192.168.31.255</span><br><span class="line"></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.31.111  netmask 255.255.255.0  broadcast 192.168.31.255</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br></pre></td></tr></table></figure>

<p><strong>修改MIPS系统网络</strong><br>以 MIPS 大端系统为例，虚拟机文件地址: <a href="https://people.debian.org/~aurel32/qemu/mips/">https://people.debian.org/~aurel32/qemu/mips/</a> 选用 <code>vmlinux-2.6.32-5-4kc-malta</code> 内核文件及 <code>debian_squeeze_mips_standard.qcow2</code> 磁盘镜像</p>
<p>启动 MIPS 虚拟机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">embeded@ubuntu:~/Desktop$ sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">&quot;root=/dev/sda1 console=tty0&quot;</span> -net nic,macaddr=00:16:3e:00:00:01 -net tap -nographic</span><br><span class="line">[    0.000000] Initializing cgroup subsys cpuset</span><br><span class="line">[    0.000000] Initializing cgroup subsys cpu</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 账号密码均为 root</span></span><br><span class="line">debian-mips login: root</span><br><span class="line">Password: </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络接口</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig -a</span></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:16:3e:00:00:01  </span><br><span class="line">          BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改MIPS系统网络配置文件 <code>/etc/network/interfaces</code>, 将 <code>eh0</code> 替换成 <code>eh1</code>，并启动 <code>en1</code> 接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@debian-mips:~# nano /etc/network/interfaces</span><br><span class="line"># This file describes the network interfaces available on your system</span><br><span class="line"># and how to activate them. For more information, see interfaces(5).</span><br><span class="line"></span><br><span class="line"># The loopback network interface</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"># The primary network interface</span><br><span class="line">allow-hotplug eth1</span><br><span class="line">iface eth1 inet dhcp</span><br><span class="line"></span><br><span class="line">root@debian-mips:~# ifup eth1</span><br><span class="line">...</span><br><span class="line">bound to 192.168.31.170 -- renewal in 21254 seconds.</span><br><span class="line"></span><br><span class="line">root@debian-mips:~# ifconfig </span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:16:3e:00:00:01  </span><br><span class="line">          inet addr:192.168.31.170  Bcast:192.168.31.255  Mask:255.255.255.0</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line"></span><br><span class="line">root@debian-mips:~# ping 192.168.31.111</span><br><span class="line">PING 192.168.31.111 (192.168.31.111) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.31.111: icmp_req=1 ttl=64 time=6.43 ms</span><br><span class="line"></span><br><span class="line">root@debian-mips:~# ping www.baidu.com</span><br><span class="line">PING www.a.shifen.com (112.80.248.76) 56(84) bytes of data.</span><br><span class="line">64 bytes from 112.80.248.76: icmp_req=1 ttl=47 time=38.3 ms</span><br></pre></td></tr></table></figure>
<p>此时 MIPS 系统的网络算是配置完成，接下来就能够使用 ssh 对其进行管理</p>
]]></content>
      <categories>
        <category>Iot</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>QEMU</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客搭建记录[2]</title>
    <url>/2022/05/02/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95-2/</url>
    <content><![CDATA[<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OS Platform: macOS</span><br><span class="line">OS Version: 10.15</span><br></pre></td></tr></table></figure>

<h3 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h3><p><strong>更换主题</strong><br>主题是博客页面的展示方式，不喜欢当前主题可以进行更换</p>
<p>hexo 主题页面：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>本文采用 <a href="https://github.com/theme-next/hexo-theme-next">Next</a> 主题</p>
<p>下载 thems 到博客文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>修改站点的配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<p>打开主题的配置文件进行 Scheme Settings</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>
<p>重新编译并部署即可</p>
<p><strong>修改目录</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br></pre></td></tr></table></figure>

<p><strong>更换头像</strong><br>选择自己喜欢的图片加进去即可</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpeg</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>添加社交网络</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/darenfy</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:darenfy@gmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br></pre></td></tr></table></figure>
<p><strong>增加阅读全文功能</strong></p>
<p><strong>开启文章目录</strong></p>
<h3 id="Hexo-使用"><a href="#Hexo-使用" class="headerlink" title="Hexo 使用"></a>Hexo 使用</h3><h4 id="如何写文章"><a href="#如何写文章" class="headerlink" title="如何写文章"></a>如何写文章</h4><p>命令行输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&#x27;blog name&#x27;</span></span><br></pre></td></tr></table></figure>
<p>就能看到在 <code>source</code> 文件夹下新建了 <code>blog name.md</code> 文件，</p>
<h4 id="搭建图床"><a href="#搭建图床" class="headerlink" title="搭建图床"></a>搭建图床</h4><p>使用 picGo 在 github 上构建免费图床，具体设置请参考 <a href="https://picgo.github.io/PicGo-Doc/zh/guide/">https://picgo.github.io/PicGo-Doc/zh/guide/</a></p>
<h3 id="Hexo-备份"><a href="#Hexo-备份" class="headerlink" title="Hexo 备份"></a>Hexo 备份</h3><p><a href="http://www.xiaoliblog.cn/page/hexobackup.html#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6">hexo-git-backup 博客备份及恢复</a><br><a href="https://github.com/coneycode/hexo-git-backup">git-backup</a></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>在进行个性化配置的过程中，如果想要实时查看配置效果，直接采用本地 <code>hexo s</code></li>
</ol>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.mdnice.com/writing/382af676baff4ed4ad5511074fb736da">https://www.mdnice.com/writing/382af676baff4ed4ad5511074fb736da</a></p>
<p><a href="https://blog.51cto.com/u_12877374/2853898">Hexo博客NexT主题开启文章目录和调整样式</a></p>
<p><a href="http://theme-next.iissnan.com/theme-settings.html">主题配置</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/460818216">hexo博客新增RSS功能支持</a></p>
<p><a href="https://tding.top/archives/42c38b10.html">Hexo-NexT (v7.0+) 主题配置</a></p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>blog搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客搭建记录[1]</title>
    <url>/2022/05/02/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95-1/</url>
    <content><![CDATA[<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OS Type: macOS</span><br><span class="line">OS Version: 10.15</span><br><span class="line">git 2.30.0</span><br><span class="line">node v16.11.0</span><br><span class="line">npm 8.0.0</span><br></pre></td></tr></table></figure>

<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p><strong>安装 hexo</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">$ hexo --version</span><br><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: darwin 19.6.0 10.15.7</span><br><span class="line"></span><br><span class="line">node: 16.11.0</span><br><span class="line">v8: 9.4.146.19-node.13</span><br><span class="line">uv: 1.42.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.2</span><br><span class="line">modules: 93</span><br><span class="line">nghttp2: 1.45.1</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 6.0.2</span><br><span class="line">openssl: 1.1.1l</span><br><span class="line">cldr: 39.0</span><br><span class="line">icu: 69.1</span><br><span class="line">tz: 2021a</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure>

<p><strong>初始化 hexo</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt; </span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br><span class="line">$ tree -L 1</span><br><span class="line">.</span><br><span class="line">├── _config.landscape.yml </span><br><span class="line">├── _config.yml <span class="comment"># 网站的配置信息</span></span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json <span class="comment"># 应用程序的信息</span></span><br><span class="line">├── scaffolds <span class="comment"># 模版文件夹 - 新建文章文件中默认添加的内容</span></span><br><span class="line">├── <span class="built_in">source</span> <span class="comment"># 存放用户资源的地方</span></span><br><span class="line">└── themes <span class="comment"># 主题文件夹 - 用来生成静态页面</span></span><br></pre></td></tr></table></figure>

<p><strong>配置远程仓库</strong><br>创建 git 仓库，仓库名为 <name>.github.io</p>
<p>在本地设置 git 配置，并将 ssh 公钥配置到 github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&#x27;&lt;gitname&gt;&#x27;</span></span><br><span class="line">$ git config --global user.email <span class="string">&#x27;&lt;gitemail&gt;&#x27;</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;&lt;gitemail&gt;&quot;</span></span><br></pre></td></tr></table></figure>
<p>查看 ssh 是否设置成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh git@github.com</span><br><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi Yourname! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string">Connection to github.com closed.</span></span><br></pre></td></tr></table></figure>

<p><strong>网站信息配置</strong><br>通过 <code>_config.yml</code> 修改配置</p>
<p>此处主要设置 <code>deploy</code>：即给 <code>hexo d</code> 进行配置告知 <code>hexo</code> 将 blog 部署在哪里</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span>  <span class="string">https://github.com/Yourname/Yourname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>安装部署插件，并部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">$ hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">$ hexo g <span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo d <span class="comment"># 部署网站</span></span><br><span class="line">....</span><br><span class="line">To https://github.com/Yourname/Yourname.github.io.git</span><br><span class="line"> * [new branch]      HEAD -&gt; master</span><br><span class="line">分支 <span class="string">&#x27;master&#x27;</span> 设置为跟踪来自 <span class="string">&#x27;https://github.com/Yourname/Yourname.github.io.git&#x27;</span> 的远程分支 <span class="string">&#x27;master&#x27;</span>。</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br></pre></td></tr></table></figure>

<p><strong>绑定域名</strong><br>绑定域名需要三步</p>
<ol>
<li><p>在域名服务商修改解析记录集<br>我使用的华为云，设置 A 和 CNAME 记录如下图<br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205021542680.png"><br>A 记录可以通过站长工具进行查询 <name>.github.io 的 ip 地址<br>注意：不能对同一个域名同时设置 A 记录和 CNAME 记录，会造成冲突</p>
</li>
<li><p>在 github 修改提供服务的域名<br>在 <name>.github.io 仓库中进行设置域名，<code>Settings-&gt;Pages-&gt;Custom domain</code>, 设置为自己的域名</p>
</li>
<li><p>在本地博客添加记录集文件 CNAME</p>
 <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">emiyada.cn</span><br></pre></td></tr></table></figure></li>
</ol>
<p>重新部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean </span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>从浏览器打开页面可以看到<br><img src="https://cdn.jsdelivr.net/gh/darenfy/wiki-resources@master/202205021540840.png"></p>
<h3 id="报错解决方式"><a href="#报错解决方式" class="headerlink" title="报错解决方式"></a>报错解决方式</h3><ol>
<li><p>无法读取远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal: <span class="string">&#x27;git@github.com/Yourname/Yourname.github.io.git&#x27;</span> does not appear to be a git repository</span><br><span class="line">fatal: 无法读取远程仓库。</span><br></pre></td></tr></table></figure>
<p>这里可能是由于将 deploy repo 设置成 git@ 连接方式，建议改成 https 连接</p>
</li>
<li><p>鉴权失败</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ <span class="keyword">for</span> more information.</span><br><span class="line">fatal: <span class="string">&#x27;https://github.com/Yourname/Yourname.github.io.git/&#x27;</span> 鉴权失败</span><br></pre></td></tr></table></figure>
<p>在部署的时候会提示输入用户名和密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Username for &#x27;https://github.com&#x27;:</span><br><span class="line">Password for &#x27;https://Yourname@github.com&#x27;:</span><br></pre></td></tr></table></figure>
<p>这里如果输入正常的github密码会报错鉴权失败，因为在2020年之后github修改成 token 认证机制</p>
</li>
</ol>
<p>token 可以通过 github 的 <code>Settings-&gt;Developer settings-&gt;Personal access tokens</code> 生成，并将其作为密码</p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>blog搭建</tag>
      </tags>
  </entry>
</search>
